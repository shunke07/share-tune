rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userID} {
      allow get: if isAuthenticated()
                 && isUserAuthenticated(userID);

      allow create: if isAuthenticated()
                    && isUserAuthenticated(userID)
                    && isUserValid(incomingData())
                    && isCreateUserValid(incomingData());

      function isUserValid(data) {
        return data.size() == 6
        && data.keys().hasAll(['displayName', 'profileText', 'siteUrl', 'image', 'createdAt', 'updatedAt'])
        && validString(data.displayName, 1, 20)
        && data.image.keys().hasAll(['id', 'url'])
        && data.createdAt is timestamp
        && data.updatedAt is timestamp;
      }

      function isCreateUserValid(data) {
        return data.profileText == null
        && data.siteUrl == null
        && data.image.id == null
        && data.image.url == null
        && data.createdAt == data.updatedAt;
      }

      match /bookmarks/{bookmarkID} {
        allow list: if isAuthenticated()
                    && isUserAuthenticated(userID);

        allow create: if isAuthenticated()
                      && isUserAuthenticated(userID)
                      && isBookmarkValid(incomingData());

        function isBookmarkValid(data) {
          return data.size() == 2
          && data.keys().hasAll(['album', 'createdAt'])
          && data.album is map
          && data.album.keys().hasAll(['id', 'imageUrl', 'artist', 'name'])
          && validUrl(data.album.imageUrl)
          && validString(data.album.id, 0, 30)
          && validString(data.album.artist, 0, 200)
          && validString(data.album.name, 0, 200)
          && data.createdAt is timestamp;
        }
      }
    }

    function isAuthenticated() {
      return request.auth != null && request.auth.uid != null;
    }

    function isUserAuthenticated(userID) {
      return request.auth.uid == userID;
    }

    function incomingData() {
      return request.resource.data;
    }

    function validString(text, min, max) {
      return text is string && min <= text.size() && text.size() <= max;
    }

    function validUrl(Url) {
      return validString(Url, 10, 2048) && Url.matches('^https?://.+$');
    }
  }
}
